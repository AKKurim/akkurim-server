services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: akkurim-server-dev
    container_name: akkurim-server-dev
    restart: always
    ports:
      - "8002:8000"
    networks:
      - akkurim_network_dev
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - API_KEY=${API_KEY}
    volumes:
      - fastapi_logs:/app/logs
    #healthcheck:
    #    test: [ "CMD", "curl", "https://devapi.akkurim.cz/"]
    #    interval: 1m
    #    timeout: 5s
    #    retries: 3
    depends_on:
      - db
      - supertokens

  db:
    image: 'postgres:latest'
    environment:
      POSTGRES_USER: ${DB_USER} 
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    #ports: shouldnt be needed since we are accessing the db internally
    #  - 5434:5432
    networks:
      - akkurim_network_dev
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', '${DB_USER}', '-d', '${DB_NAME}']
      interval: 5s
      timeout: 5s
      retries: 5

  dbsupertokens:
    image: 'postgres:latest'
    environment:
      POSTGRES_USER: ${DB_SUPERTOKENS_USER}
      POSTGRES_PASSWORD: ${DB_SUPERTOKENS_PASSWORD}
      POSTGRES_DB: ${DB_SUPERTOKENS_NAME}
    volumes:
      - postgres_auth_dev:/var/lib/postgresql/data
    #ports:
    #  - 5435:5432
    networks:
      - akkurim_network_dev
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', '${DB_SUPERTOKENS_USER}', '-d', '${DB_SUPERTOKENS_NAME}']
      interval: 5s
      timeout: 5s
      retries: 5

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql
    depends_on:
      dbsupertokens:
        condition: service_healthy
    ports:
      - 3569:3567
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://${DB_SUPERTOKENS_USER}:${DB_SUPERTOKENS_PASSWORD}@dbsupertokens:5432/${DB_SUPERTOKENS_NAME}"
    networks:
      - akkurim_network_dev
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  akkurim_network_dev:
    driver: bridge

volumes:
  postgres_data_dev:
  postgres_auth_dev:
  fastapi_logs: